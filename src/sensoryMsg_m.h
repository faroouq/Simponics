//
// Generated file, do not edit! Created by nedtool 5.6 from sensoryMsg.msg.
//

#ifndef __SIMPONICS_SENSORYMSG_M_H
#define __SIMPONICS_SENSORYMSG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif


namespace simponics {

/**
 * Class generated from <tt>sensoryMsg.msg:21</tt> by nedtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * message sensoryMsg
 * {
 *     int entries;
 *     int source;
 *     int destination;
 * 
 *     string payload;
 *     string dataName[10];
 *     double dataValue[10];
 *     double dataStdValue[10];
 * 
 *     double txTime;
 * }
 * </pre>
 */
class sensoryMsg : public ::omnetpp::cMessage
{
  protected:
    int entries;
    int source;
    int destination;
    ::omnetpp::opp_string payload;
    ::omnetpp::opp_string dataName[10];
    double dataValue[10];
    double dataStdValue[10];
    double txTime;

  private:
    void copy(const sensoryMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const sensoryMsg&);

  public:
    sensoryMsg(const char *name=nullptr, short kind=0);
    sensoryMsg(const sensoryMsg& other);
    virtual ~sensoryMsg();
    sensoryMsg& operator=(const sensoryMsg& other);
    virtual sensoryMsg *dup() const override {return new sensoryMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getEntries() const;
    virtual void setEntries(int entries);
    virtual int getSource() const;
    virtual void setSource(int source);
    virtual int getDestination() const;
    virtual void setDestination(int destination);
    virtual const char * getPayload() const;
    virtual void setPayload(const char * payload);
    virtual unsigned int getDataNameArraySize() const;
    virtual const char * getDataName(unsigned int k) const;
    virtual void setDataName(unsigned int k, const char * dataName);
    virtual unsigned int getDataValueArraySize() const;
    virtual double getDataValue(unsigned int k) const;
    virtual void setDataValue(unsigned int k, double dataValue);
    virtual unsigned int getDataStdValueArraySize() const;
    virtual double getDataStdValue(unsigned int k) const;
    virtual void setDataStdValue(unsigned int k, double dataStdValue);
    virtual double getTxTime() const;
    virtual void setTxTime(double txTime);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const sensoryMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, sensoryMsg& obj) {obj.parsimUnpack(b);}

} // namespace simponics

#endif // ifndef __SIMPONICS_SENSORYMSG_M_H

